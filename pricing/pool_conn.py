"""M√≥dulo de precifica√ß√£o e cria√ß√£o do multi-grupo pre√ßo MM."""
import atexit
import os
from threading import Lock
import psycopg
from psycopg import Connection
from psycopg.pq import TransactionStatus
from psycopg.errors import Error as PsycopgError
from psycopg_pool import ConnectionPool
from utils.log import logger

_reconnect_lock = Lock()

def config_conn(conn):
    """Eliminando prepare"""
    conn.prepare_threshold = None

def reset_connection(conn: psycopg.Connection) -> None:
    """Reseta uma conex√£o antes de devolv√™-la ao pool"""
    try:
        if _reconnect_lock:
            ts = conn.info.transaction_status
            if ts in (TransactionStatus.INTRANS, TransactionStatus.INERROR):
                logger.debug("Conex√£o ainda em transa√ß√£o, aplicando rollback.")
                conn.rollback()
            if ts == TransactionStatus.UNKNOWN:
                logger.error("Conex√£o em estado UNKNOWN ‚Äî fechando conex√£o.")
                conn.close()
    except PsycopgError as e:
        logger.warning("Erro ao resetar conex√£o, for√ßando fechamento: %s", e)
        conn.close()

def check_connection(conn: Connection) -> None:
    """Valida a conex√£o antes de entregar ao cliente. Recupera se poss√≠vel."""
    try:
        if _reconnect_lock:
            ts = conn.info.transaction_status
            if ts in (TransactionStatus.INTRANS, TransactionStatus.INERROR):
                logger.warning("check: transa√ß√£o com erro ‚Äî rollback.")
                conn.rollback()
            if ts == TransactionStatus.UNKNOWN:
                logger.error("check: conex√£o em estado UNKNOWN ‚Äî descartando.")
                conn.close()
                # raise OperationalError("Conex√£o em estado desconhecido.")
            with conn.cursor() as cur:
                cur.execute("SELECT 1", prepare=False)
                cur.fetchone()

    except PsycopgError as e:
        logger.error("check: falha ao validar conex√£o ‚Äî descartando. Erro: %s", e)
        conn.close()
        # raise OperationalError("Conex√£o inv√°lida mesmo ap√≥s tentativa de recupera√ß√£o.") from e

def on_reconnect_failed(_pool: ConnectionPool):
    """Tentanto reconex√£o ao falhar"""
    logger.critical("üö® FALHA ao tentar reconectar ao banco ap√≥s timeout.")
    try:
        if _reconnect_lock:
            logger.info("Tentando reiniciar o pool manualmente...")
            _pool.close()
            _pool.open()
            logger.info("Pool reiniciado com sucesso.")
    except Exception as e:
        logger.critical("Erro ao reiniciar o pool: %s", e)

pool = ConnectionPool(
        conninfo=os.getenv("MMDBDEV",''),
        open=True,
        min_size=1,
        max_size=10,
        max_waiting=0,
        timeout=60,
        max_lifetime=3600,
        max_idle=600,
        reconnect_timeout=600,
        reset=reset_connection,
        check=check_connection,
        reconnect_failed=on_reconnect_failed,
        configure=config_conn
    )

atexit.register(pool.close)
